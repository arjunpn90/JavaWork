import java.util.Comparator;
import java.util.PriorityQueue;


public class FindRunningMedian {

	public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int aCount = Integer.parseInt(scanner.nextLine().trim());

        int[] a = new int[aCount];

        for (int aItr = 0; aItr < aCount; aItr++) {
            int aItem = Integer.parseInt(scanner.nextLine().trim());
            a[aItr] = aItem;
        }

        double[] result = runningMedian(a);

        for (int resultItr = 0; resultItr < result.length; resultItr++) {
            bufferedWriter.write(String.valueOf(result[resultItr]));

            if (resultItr != result.length - 1) {
                bufferedWriter.write("\n");
            }
        }

        bufferedWriter.newLine();

        bufferedWriter.close();
    }
	
	public static double[] getMedians(int[] array){
		PriorityQueue<Integer> lowers = new PriorityQueue<Integer>(new Comparator<Integer>() {
			public int compare(Integer a, Integer b){
				return -1 * a.compareTo(b);
			}
		});
		PriorityQueue<Integer> highers = new PriorityQueue<Integer>();
		double[] medians = new double[array.length];
		for (int i=0; i<array.length; i++){
			addNumber(array[i], lowers, highers);
			rebalance(lowers, highers);
			medians[i] = getMedian(lowers, highers);
		}
		return medians;
	}	
	
	private static void addNumber(Integer number, PriorityQueue<Integer> lowers, PriorityQueue<Integer> highers){
		if (lowers.size() ==0 || number < lowers.peek()){
			lowers.add(number);
		}else{
			highers.add(number);
		}
	}
	
	private static void rebalance(PriorityQueue<Integer> lowers, PriorityQueue<Integer> highers){
		if (highers.size() - lowers.size() >= 2 || highers.size() - lowers.size() <= -2){
			lowers.add(highers.peek());
		}
	}
	
	private static double getMedian(PriorityQueue<Integer> lowers, PriorityQueue<Integer> highers){
		double median;
		if (lowers.size() == highers.size()){
			median = (double) (lowers.peek() + highers.peek())/2;
		}
		else if (lowers.size() > highers.size()){
			median = lowers.peek();
		}
		else{
			median = highers.peek();
		}			
		return median;
	}
}
